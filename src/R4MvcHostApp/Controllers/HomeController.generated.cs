// <auto-generated />
// This file was generated by R4Mvc.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the r4mvc.json file (i.e. the settings file), save it and run the generator tool again.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo.Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
#pragma warning disable 1591, 3008, 3009, 0108
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Routing;
using R4Mvc;

namespace R4MvcHostApp.Controllers
{
    public partial class HomeController
    {
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public HomeController()
        {
        }

        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        protected HomeController(Dummy d)
        {
        }

        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(IActionResult result)
        {
            var callInfo = result.GetR4MvcResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<IActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(IActionResult result)
        {
            var callInfo = result.GetR4MvcResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<IActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public virtual IActionResult Secure()
        {
            return new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.Secure, "https");
        }

        [NonAction]
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public virtual IActionResult ActionMethod()
        {
            return new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.ActionMethod);
        }

        [NonAction]
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public virtual IActionResult JsonMethod()
        {
            return new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.JsonMethod);
        }

        [NonAction]
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public virtual IActionResult ContentMethod()
        {
            return new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.ContentMethod);
        }

        [NonAction]
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public virtual IActionResult RedirectMethod()
        {
            return new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.RedirectMethod);
        }

        [NonAction]
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public virtual IActionResult RedirectToActionMethod()
        {
            return new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.RedirectToActionMethod);
        }

        [NonAction]
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public virtual IActionResult RedirectToRouteMethod()
        {
            return new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.RedirectToRouteMethod);
        }

        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public HomeController Actions => MVC.Home;
        [GeneratedCode("R4Mvc", "1.0")]
        public readonly string Area = "";
        [GeneratedCode("R4Mvc", "1.0")]
        public readonly string Name = "Home";
        [GeneratedCode("R4Mvc", "1.0")]
        public const string NameConst = "Home";
        [GeneratedCode("R4Mvc", "1.0")]
        static readonly ActionNamesClass s_ActionNames = new ActionNamesClass();
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames => s_ActionNames;
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string About = "About";
            public readonly string Contact = "Contact";
            public readonly string Secure = "Secure";
            public readonly string Error = "Error";
            public readonly string TaskActionResult = "TaskActionResult";
            public readonly string TaskResult = "TaskResult";
            public readonly string TaskJsonResult = "TaskJsonResult";
            public readonly string ActionMethod = "ActionMethod";
            public readonly string JsonMethod = "JsonMethod";
            public readonly string ContentMethod = "ContentMethod";
            public readonly string RedirectMethod = "RedirectMethod";
            public readonly string RedirectToActionMethod = "RedirectToActionMethod";
            public readonly string RedirectToRouteMethod = "RedirectToRouteMethod";
            public readonly string User = "User";
            public readonly string Users = "Users";
            public readonly string ExtensionTest = "ExtensionTest";
        }

        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string About = "About";
            public const string Contact = "Contact";
            public const string Secure = "Secure";
            public const string Error = "Error";
            public const string TaskActionResult = "TaskActionResult";
            public const string TaskResult = "TaskResult";
            public const string TaskJsonResult = "TaskJsonResult";
            public const string ActionMethod = "ActionMethod";
            public const string JsonMethod = "JsonMethod";
            public const string ContentMethod = "ContentMethod";
            public const string RedirectMethod = "RedirectMethod";
            public const string RedirectToActionMethod = "RedirectToActionMethod";
            public const string RedirectToRouteMethod = "RedirectToRouteMethod";
            public const string User = "User";
            public const string Users = "Users";
            public const string ExtensionTest = "ExtensionTest";
        }

        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames => s_ViewNames;
            public class _ViewNamesClass
            {
                public readonly string About = "About";
                public readonly string Contact = "Contact";
                public readonly string Index = "Index";
            }

            public readonly string About = "~/Views/Home/About.cshtml";
            public readonly string Contact = "~/Views/Home/Contact.cshtml";
            public readonly string Index = "~/Views/Home/Index.cshtml";
            static readonly _DisplayTemplatesClass s_DisplayTemplates = new _DisplayTemplatesClass();
            public _DisplayTemplatesClass DisplayTemplates => s_DisplayTemplates;
            public partial class _DisplayTemplatesClass
            {
                public readonly string Test = "Test";
            }

            static readonly _EditorTemplatesClass s_EditorTemplates = new _EditorTemplatesClass();
            public _EditorTemplatesClass EditorTemplates => s_EditorTemplates;
            public partial class _EditorTemplatesClass
            {
                public readonly string Test = "Test";
            }

            static readonly _OtherTemplatesClass s_OtherTemplates = new _OtherTemplatesClass();
            public _OtherTemplatesClass OtherTemplates => s_OtherTemplates;
            public partial class _OtherTemplatesClass
            {
                static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
                public _ViewNamesClass ViewNames => s_ViewNames;
                public class _ViewNamesClass
                {
                    public readonly string Test = "Test";
                }

                public readonly string Test = "~/Views/Home/OtherTemplates/Test.cshtml";
            }
        }

        [GeneratedCode("R4Mvc", "1.0")]
        static readonly ViewsClass s_Views = new ViewsClass();
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public ViewsClass Views => s_Views;
    }

    [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
    public partial class R4MVC_HomeController : R4MvcHostApp.Controllers.HomeController
    {
        public R4MVC_HomeController(): base (Dummy.Instance)
        {
        }

        [NonAction]
        partial void IndexOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult callInfo);
        [NonAction]
        public override Microsoft.AspNetCore.Mvc.IActionResult Index()
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AboutOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult callInfo);
        [NonAction]
        public override Microsoft.AspNetCore.Mvc.IActionResult About()
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.About);
            AboutOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ContactOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult callInfo);
        [NonAction]
        public override Microsoft.AspNetCore.Mvc.IActionResult Contact()
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.Contact);
            ContactOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void SecureOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult callInfo, string param);
        [NonAction]
        public override Microsoft.AspNetCore.Mvc.IActionResult Secure(string param)
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.Secure, "https");
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "param", param);
            SecureOverride(callInfo, param);
            return callInfo;
        }

        [NonAction]
        partial void ErrorOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult callInfo);
        [NonAction]
        public override Microsoft.AspNetCore.Mvc.IActionResult Error()
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.Error);
            ErrorOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void TaskActionResultOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult callInfo);
        [NonAction]
        public override System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> TaskActionResult()
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.TaskActionResult);
            TaskActionResultOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as Microsoft.AspNetCore.Mvc.IActionResult);
        }

        [NonAction]
        partial void TaskResultOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult callInfo);
        [NonAction]
        public override System.Threading.Tasks.Task TaskResult()
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.TaskResult);
            TaskResultOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo);
        }

        [NonAction]
        partial void TaskJsonResultOverride(R4Mvc_Microsoft_AspNetCore_Mvc_JsonResult callInfo);
        [NonAction]
        public override System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.JsonResult> TaskJsonResult()
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_JsonResult(Area, Name, ActionNames.TaskJsonResult);
            TaskJsonResultOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as Microsoft.AspNetCore.Mvc.JsonResult);
        }

        [NonAction]
        partial void ActionMethodOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult callInfo, int id);
        [NonAction]
        public override Microsoft.AspNetCore.Mvc.ActionResult ActionMethod(int id)
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.ActionMethod);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ActionMethodOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void JsonMethodOverride(R4Mvc_Microsoft_AspNetCore_Mvc_JsonResult callInfo, int id);
        [NonAction]
        public override Microsoft.AspNetCore.Mvc.JsonResult JsonMethod(int id)
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_JsonResult(Area, Name, ActionNames.JsonMethod);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            JsonMethodOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void ContentMethodOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ContentResult callInfo, int id);
        [NonAction]
        public override Microsoft.AspNetCore.Mvc.ContentResult ContentMethod(int id)
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ContentResult(Area, Name, ActionNames.ContentMethod);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ContentMethodOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void RedirectMethodOverride(R4Mvc_Microsoft_AspNetCore_Mvc_RedirectResult callInfo, int id);
        [NonAction]
        public override Microsoft.AspNetCore.Mvc.RedirectResult RedirectMethod(int id)
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_RedirectResult(Area, Name, ActionNames.RedirectMethod);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            RedirectMethodOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void RedirectToActionMethodOverride(R4Mvc_Microsoft_AspNetCore_Mvc_RedirectToActionResult callInfo, int id);
        [NonAction]
        public override Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionMethod(int id)
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_RedirectToActionResult(Area, Name, ActionNames.RedirectToActionMethod);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            RedirectToActionMethodOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void RedirectToRouteMethodOverride(R4Mvc_Microsoft_AspNetCore_Mvc_RedirectToRouteResult callInfo, int id);
        [NonAction]
        public override Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRouteMethod(int id)
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_RedirectToRouteResult(Area, Name, ActionNames.RedirectToRouteMethod);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            RedirectToRouteMethodOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void ExtensionTestOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult callInfo);
        [NonAction]
        public override Microsoft.AspNetCore.Mvc.IActionResult ExtensionTest()
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.ExtensionTest);
            ExtensionTestOverride(callInfo);
            return callInfo;
        }
    }
}
#pragma warning restore 1591, 3008, 3009, 0108
